from collections import deque

# BFS
def bfs(graph, start):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start])  # Use deque as a queue

    while queue:
        vertex = queue.popleft()  # Pop the first vertex from the queue
        if vertex not in visited:
            print(vertex, end=" ")
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)  # Add unvisited neighbors to the queue

# DFS
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()  # Set to keep track of visited nodes

    visited.add(start)
    print(start, end=" ")

    for neighbor in graph[start] - visited:
        dfs(graph, neighbor, visited)

# Example graph representation (adjacency list)
graph = {
    0: {1, 2},
    1: {2},
    2: {0, 3},
    3: {3}
}

print("BFS:")
bfs(graph, 2)  # Start BFS from vertex 2

print("\nDFS:")
dfs(graph, 2)  # Start DFS from vertex 2
